#!/bin/sh
# $Id$

echo_error() # private
{
	printf %s\\n "${0##*/}: $*" >&2
}

array_count() # private
{
	eval set -- "\$$1"
	echo $#
}

define() # private
{
	local arg="$3"
	if [ -z "${arg##*[\"\$\`\\]*}" ]; then
		arg=$(printf %s "$arg" | sed -e 's/["$`\]/\\&/g')
	fi
	eval "$1_$2=\"$arg\""
}

define_array() # private
{
	local arg="$3"
	if [ -z "${arg##*[\"\$\`\\]*}" ]; then
		arg=$(printf %s "$arg" | sed -e 's/["$`\]/\\&/g')
	fi
	local n=$(array_count "ARRAY_$1_$2")
	eval "$1_$2_$n=\"$arg\"; ARRAY_$1_$2=\"\$ARRAY_$1_$2 $1_$2_$n\""
}

lookup() # private
{
	eval "echo \$$1_$2"
}

lookup_array() # private
{
	eval "echo \$ARRAY_$1_$2"
}

validate() # private
{
	printf %s "$1" | grep -q '^[a-z0-9_]*$'
}

NAME_LIST=
register() # private
{
	[ -z "$(lookup REGISTERED "$1")" ] || return
	define REGISTERED "$1" yes
	[ -z "$NAME_LIST" ] && NAME_LIST="$1" || NAME_LIST="$NAME_LIST $1"
}

new_fmode()
{
	register "$1"
	define NAME_TO_FMODE "$1" "$2"
	define NAME_TO_OWNER "$1" "$3:$4"
	define FMODE_OWNER_TO_NAME "$2_$3_$4" "$1"
}

new_subst()
{
	register "$1"
	define_array NAME_TO_REGEX "$1" "$2"
	define_array NAME_TO_SUBST "$1" "$3"
}

new_help()
{
	register "$1"
	define HELP_TO "$1" "$2"
}

stat_file() # private
{
	local PATHNAME="$1" BASEPATH

	BASEPATH="${PATHNAME%/*}"
	find "$BASEPATH" -maxdepth 1 -path "$PATHNAME" -printf '%m_%u_%g'
}

control_list()
{
	printf %s\\n "$NAME_LIST"
}

control_help()
{
  	local NAME

	for NAME in $NAME_LIST; do
		printf %s "$NAME: "
		lookup HELP_TO "$NAME"
	done
}

control_fmode_status() # private
{
	local FILE="$1" STAT NAME

	STAT="$(stat_file "$FILE")"
	NAME="$(validate "$STAT" && lookup FMODE_OWNER_TO_NAME "$STAT")"
	if [ -n "$NAME" ]; then
		printf %s\\n "$NAME"
	else
		echo "unknown"
	fi
}

control_fmode()
{
	local FILE="$1" REQUEST="$2" FMODE= OWNER=

	case "$REQUEST" in
	help)
		control_help
		;;
	list)
		control_list
		;;
	status)
		control_fmode_status "$FILE"
		;;
	*)
		if validate "$REQUEST"; then
			FMODE="$(lookup NAME_TO_FMODE "$REQUEST")"
			OWNER="$(lookup NAME_TO_OWNER "$REQUEST")"
		fi
		if [ -z "$FMODE" -o -z "$OWNER" ]; then
			echo_error "Invalid mode: $REQUEST"
			return 1
		fi
		if [ "$(control_fmode_status "$FILE")" = "$REQUEST" ]; then
			return
		fi
		chown "$OWNER" "$FILE" && chmod "$FMODE" "$FILE" || return 1
		;;
	esac
}

control_subst_status() # private
{
	local FILE="$1" ARRAY ELEM FOUND NAME REGEX

	for NAME in $NAME_LIST; do
		FOUND=
		ARRAY="$(lookup_array NAME_TO_REGEX "$NAME")"
		for ELEM in $ARRAY; do
			REGEX="$(eval "echo \$$ELEM")"
			[ -n "$REGEX" ] || continue
			grep -Eq "$REGEX" "$FILE" &&
				FOUND=1 ||
				{ FOUND=; break; }
		done
		if [ -n "$FOUND" ]; then
			printf %s\\n "$NAME"
			return
		fi
	done
	echo "unknown"
}

control_subst()
{
	local FILE="$1" REQUEST="$2" ARRAY ELEM SUBST

	case "$REQUEST" in
	help)
		control_help
		;;
	list)
		control_list
		;;
	status)
		control_subst_status "$FILE"
		;;
	*)
		ARRAY="$(validate "$REQUEST" && lookup_array NAME_TO_SUBST "$REQUEST")"
		if [ -z "$ARRAY" ]; then
			echo_error "Invalid mode: $REQUEST"
			return 1
		fi
		for ELEM in $ARRAY; do
			SUBST="$(eval "echo \$$ELEM")"
			if [ -z "$SUBST" ]; then
				echo_error "Invalid mode: $REQUEST"
				return 1
			fi
			[ "$(control_subst_status "$FILE")" != "$REQUEST" ] || continue
			subst "$SUBST" "$FILE" || return 1
		done
		;;
	esac
}

is_builtin_mode()
{
	case "$1" in
	help|list|status|'')
		return 0
		;;
	esac
	return 1
}

[ -n "$*" ] || set - status
